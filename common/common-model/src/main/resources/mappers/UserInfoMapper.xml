<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.liumapp.common.model.mapper.UserInfoMapper">
  <resultMap id="BaseResultMap" type="com.liumapp.common.model.domain.UserInfo">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="userId" jdbcType="BIGINT" property="userid" />
    <result column="sex" jdbcType="BIT" property="sex" />
    <result column="nationality" jdbcType="VARCHAR" property="nationality" />
    <result column="bornAt" jdbcType="TIMESTAMP" property="bornat" />
    <result column="provinceCode" jdbcType="VARCHAR" property="provincecode" />
    <result column="cityCode" jdbcType="VARCHAR" property="citycode" />
    <result column="areaCode" jdbcType="VARCHAR" property="areacode" />
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="identityCode" jdbcType="VARCHAR" property="identitycode" />
    <result column="identityPhoto" jdbcType="VARCHAR" property="identityphoto" />
    <result column="handIdentityPhoto" jdbcType="VARCHAR" property="handidentityphoto" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, userId, sex, nationality, bornAt, provinceCode, cityCode, areaCode, address, 
    identityCode, identityPhoto, handIdentityPhoto
  </sql>
  <select id="selectByExample" parameterType="com.liumapp.common.model.domain.UserInfoExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from user_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user_info
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from user_info
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.liumapp.common.model.domain.UserInfoExample">
    delete from user_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.liumapp.common.model.domain.UserInfo">
    insert into user_info (id, userId, sex, nationality, 
      bornAt, provinceCode, cityCode, 
      areaCode, address, identityCode, 
      identityPhoto, handIdentityPhoto)
    values (#{id,jdbcType=BIGINT}, #{userid,jdbcType=BIGINT}, #{sex,jdbcType=BIT}, #{nationality,jdbcType=VARCHAR}, 
      #{bornat,jdbcType=TIMESTAMP}, #{provincecode,jdbcType=VARCHAR}, #{citycode,jdbcType=VARCHAR}, 
      #{areacode,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, #{identitycode,jdbcType=VARCHAR}, 
      #{identityphoto,jdbcType=VARCHAR}, #{handidentityphoto,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.liumapp.common.model.domain.UserInfo">
    insert into user_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userid != null">
        userId,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="nationality != null">
        nationality,
      </if>
      <if test="bornat != null">
        bornAt,
      </if>
      <if test="provincecode != null">
        provinceCode,
      </if>
      <if test="citycode != null">
        cityCode,
      </if>
      <if test="areacode != null">
        areaCode,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="identitycode != null">
        identityCode,
      </if>
      <if test="identityphoto != null">
        identityPhoto,
      </if>
      <if test="handidentityphoto != null">
        handIdentityPhoto,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="userid != null">
        #{userid,jdbcType=BIGINT},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=BIT},
      </if>
      <if test="nationality != null">
        #{nationality,jdbcType=VARCHAR},
      </if>
      <if test="bornat != null">
        #{bornat,jdbcType=TIMESTAMP},
      </if>
      <if test="provincecode != null">
        #{provincecode,jdbcType=VARCHAR},
      </if>
      <if test="citycode != null">
        #{citycode,jdbcType=VARCHAR},
      </if>
      <if test="areacode != null">
        #{areacode,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="identitycode != null">
        #{identitycode,jdbcType=VARCHAR},
      </if>
      <if test="identityphoto != null">
        #{identityphoto,jdbcType=VARCHAR},
      </if>
      <if test="handidentityphoto != null">
        #{handidentityphoto,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.liumapp.common.model.domain.UserInfoExample" resultType="java.lang.Long">
    select count(*) from user_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user_info
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.userid != null">
        userId = #{record.userid,jdbcType=BIGINT},
      </if>
      <if test="record.sex != null">
        sex = #{record.sex,jdbcType=BIT},
      </if>
      <if test="record.nationality != null">
        nationality = #{record.nationality,jdbcType=VARCHAR},
      </if>
      <if test="record.bornat != null">
        bornAt = #{record.bornat,jdbcType=TIMESTAMP},
      </if>
      <if test="record.provincecode != null">
        provinceCode = #{record.provincecode,jdbcType=VARCHAR},
      </if>
      <if test="record.citycode != null">
        cityCode = #{record.citycode,jdbcType=VARCHAR},
      </if>
      <if test="record.areacode != null">
        areaCode = #{record.areacode,jdbcType=VARCHAR},
      </if>
      <if test="record.address != null">
        address = #{record.address,jdbcType=VARCHAR},
      </if>
      <if test="record.identitycode != null">
        identityCode = #{record.identitycode,jdbcType=VARCHAR},
      </if>
      <if test="record.identityphoto != null">
        identityPhoto = #{record.identityphoto,jdbcType=VARCHAR},
      </if>
      <if test="record.handidentityphoto != null">
        handIdentityPhoto = #{record.handidentityphoto,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user_info
    set id = #{record.id,jdbcType=BIGINT},
      userId = #{record.userid,jdbcType=BIGINT},
      sex = #{record.sex,jdbcType=BIT},
      nationality = #{record.nationality,jdbcType=VARCHAR},
      bornAt = #{record.bornat,jdbcType=TIMESTAMP},
      provinceCode = #{record.provincecode,jdbcType=VARCHAR},
      cityCode = #{record.citycode,jdbcType=VARCHAR},
      areaCode = #{record.areacode,jdbcType=VARCHAR},
      address = #{record.address,jdbcType=VARCHAR},
      identityCode = #{record.identitycode,jdbcType=VARCHAR},
      identityPhoto = #{record.identityphoto,jdbcType=VARCHAR},
      handIdentityPhoto = #{record.handidentityphoto,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.liumapp.common.model.domain.UserInfo">
    update user_info
    <set>
      <if test="userid != null">
        userId = #{userid,jdbcType=BIGINT},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=BIT},
      </if>
      <if test="nationality != null">
        nationality = #{nationality,jdbcType=VARCHAR},
      </if>
      <if test="bornat != null">
        bornAt = #{bornat,jdbcType=TIMESTAMP},
      </if>
      <if test="provincecode != null">
        provinceCode = #{provincecode,jdbcType=VARCHAR},
      </if>
      <if test="citycode != null">
        cityCode = #{citycode,jdbcType=VARCHAR},
      </if>
      <if test="areacode != null">
        areaCode = #{areacode,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="identitycode != null">
        identityCode = #{identitycode,jdbcType=VARCHAR},
      </if>
      <if test="identityphoto != null">
        identityPhoto = #{identityphoto,jdbcType=VARCHAR},
      </if>
      <if test="handidentityphoto != null">
        handIdentityPhoto = #{handidentityphoto,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.liumapp.common.model.domain.UserInfo">
    update user_info
    set userId = #{userid,jdbcType=BIGINT},
      sex = #{sex,jdbcType=BIT},
      nationality = #{nationality,jdbcType=VARCHAR},
      bornAt = #{bornat,jdbcType=TIMESTAMP},
      provinceCode = #{provincecode,jdbcType=VARCHAR},
      cityCode = #{citycode,jdbcType=VARCHAR},
      areaCode = #{areacode,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      identityCode = #{identitycode,jdbcType=VARCHAR},
      identityPhoto = #{identityphoto,jdbcType=VARCHAR},
      handIdentityPhoto = #{handidentityphoto,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>